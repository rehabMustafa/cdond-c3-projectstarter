version: 2.1
orbs:
  slack: circleci/slack@4.12.1
commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name frontend-<< parameters.Workflow_ID >>
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1
  notify_on_success:
    steps:
      - slack/notify:
          event: pass
          channel: $SLACK_DEFAULT_CHANNEL
          template: success_tagged_deployment_1


  revert-migrations:
    description: Revert the last migration
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/RT1NwBGbymsKgmQTH8X31B/migration_<< parameters.Workflow_ID >>)
            echo "$SUCCESS"
            # Logic for reverting the database state
            if [[ "${SUCCESS}" == "1" ]]
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build:prod
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm install oauth-sign
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
     
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
#       # Here's where you will add some code to rollback on failure      
      - destroy_environment
  configure-infrastructure:
    docker:
      - image: mareimorsy/aws-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d6:7d:df:cc:eb:2a:7c:16:eb:35:b4:73:44:13:74:f8"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            ls
            pwd
            cd .circleci/ansible
            # aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml -vv
            # ansible-playbook -i inventory.txt prometheus-exporter.yml -vv
      - destroy_environment    
  run-migrations:
    docker:
      - image:  mareimorsy/aws-node
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            export TYPEORM_HOST=${TYPEORM_HOST}
            cd backend
            npm install
            # npm run premigrations
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            curl --insecure https://kvdb.io/RT1NwBGbymsKgmQTH8X31B/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            
      - destroy_environment
  deploy-frontend:
    docker:
      - image: mareimorsy/aws-node
    steps:
      - checkout
      - attach_workspace:
          at: ~/     
      - run:
          name: Deploy Frontend
          command: |
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
             echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" 
            # Build the frontend
            cd frontend
            echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" > .env
            npm install
            npm run build:prod
            # aws s3 sync dist s3://udapeople-project
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy_environment   
  deploy-backend:
    docker:
      - image: mareimorsy/aws-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d6:7d:df:cc:eb:2a:7c:16:eb:35:b4:73:44:13:74:f8"]
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
            # export TYPEORM_EC2HOST=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            # echo $TYPEORM_EC2HOST >> .circleci/ansible/inventory.txt
            cd backend
            npm i
            npm run build
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" > .env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> .env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
            echo "TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}" >> .env
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> .env
            tar -czf artifact.tar.gz dist/* package* .env
            cp artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/artifact.tar.gz
            ls ../.circleci/ansible/roles/deploy/
            cd ../.circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations
      - destroy_environment
   
  smoke-test:
    docker:
      - image: mareimorsy/aws-node
    steps:
      - checkout
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            
            URL="http://$BACKEND_PUBLIC_IP:3030/api/status"
            if curl -s --head ${URL}
            then
              echo "It worked!"
              exit 0
            else
              echo "Rolling Back"
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      # - notify_on_failure
      - revert-migrations
      - destroy_environment

  cloudfront-update:
    docker:
      - image: mareimorsy/aws-node
    steps:
      - checkout
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl -k https://kvdb.io/RT1NwBGbymsKgmQTH8X31B/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name InitialStack
  cleanup:
    docker:
      - image: mareimorsy/aws-node
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            export OldWorkflowID=$(curl --insecure https://kvdb.io/RT1NwBGbymsKgmQTH8X31B/old_workflow_id)
            echo Old Workflow ID: $OldWorkflowID 
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "frontend-${OldWorkflowID}"
            fi

  configure-exporter:
    docker:
      - image: mareimorsy/aws-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d6:7d:df:cc:eb:2a:7c:16:eb:35:b4:73:44:13:74:f8"]
      - run:
          name: Configure exporter
          command: |
            ls
            pwd
            cd .circleci/ansible
            aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt
            cat inventory.txt
            ansible-playbook -i inventory.txt prometheus-exporter.yml -vv
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          filters:
            branches: 
              only: [master]
          requires:
            - build-backend
            - build-frontend
       
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          filters:
            branches: 
              only: [master]
          requires: [deploy-infrastructure]
      - deploy-backend:
          filters:
            branches: 
              only: [master]
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          filters:
            branches: 
              only: [master]
          requires: [smoke-test]
      - cleanup:
          filters:
            branches: 
              only: [master]
          requires: [cloudfront-update]
      
      #   # - configure-exporter

